class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string,int> mp;
        vector<string> ans;
        for(auto i:words) mp[i]++;
        auto  comp = [](
            pair<int,string> &a , pair<int,string> &b
        ){
            if(a.first == b.first) return a.second < b.second;
            else return a.first > b.first;
        };
        priority_queue<pair<int,string>, vector<pair<int,string>>,decltype(comp)>pq;
        for(auto i:mp){
            if(pq.size()<k) pq.push({i.second,i.first});
            else {
                if(pq.top().first < i.second or 
                (pq.top().first == i.second and pq.top().second > i.first)){
                    pq.pop();
                    pq.push({i.second,i.first});
                }
            }
        }
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;

    }
};
