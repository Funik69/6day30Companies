/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void pre(TreeNode* root,map<int,vector<int>> &mp,TreeNode* &prev){
    if(root==NULL) return ;
       if(prev->val!=-1) mp[root->val].push_back(prev->val);
       if(root->left!=NULL) mp[root->val].push_back(root->left->val);
       if(root->right!=NULL) mp[root->val].push_back(root->right->val);
       pre(root->left,mp,root);
       pre(root->right,mp,root);
   
}
    int amountOfTime(TreeNode* root, int start) {
        if(root->left == NULL and root->right==NULL and start==root->val) return 0;
        map<int,vector<int>> mp;
        TreeNode * prev = new TreeNode(-1);
        pre(root,mp,prev);
        map<int,int> vis;
        vis[start]++;
        queue<int> q;
        q.push(start);
        int cnt=0;
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
            int node = q.front();
            q.pop();
            for(auto i:mp[node]){
               if(vis[i]==0){
                   vis[i]++;
                   q.push(i);
               }
            }
            }
            cnt++;
        }
return cnt-1;
    }
};
