class ThroneInheritance {
public:
unordered_map<string,vector<string>> child;
unordered_map<string,bool> dead;
string king;
void dfs(vector<string>& ans, string par){
    if(!dead[par]) ans.push_back(par);
    for(auto i:child[par]){
        dfs(ans,i);
    }
}
    ThroneInheritance(string kingName) {
        king = kingName;
    }
    
    void birth(string parentName, string childName) {
        child[parentName].push_back(childName);
    }
    
    void death(string name) {
        dead[name]=1;
    }
    vector<string> getInheritanceOrder() {
        vector<string> ans;
        dfs(ans,king);
        return ans;
    }
};

/**
 * Your ThroneInheritance object will be instantiated and called as such:
 * ThroneInheritance* obj = new ThroneInheritance(kingName);
 * obj->birth(parentName,childName);
 * obj->death(name);
 * vector<string> param_3 = obj->getInheritanceOrder();
 */
